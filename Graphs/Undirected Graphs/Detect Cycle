def has_cycle(edges, n):
    adj = {i: [] for i in range(n)}
    for a, b in edges:
        adj[a].append(b)
        adj[b].append(a)
        
    def dfs(vertex, parent):
        visited.add(vertex)

        for neighbor in adj[vertex]:
            if neighbor not in visited:
                if dfs(neighbor, vertex):
                    return True
            elif parent != neighbor:
                return True

        return False

    # Initialize visited set
    visited = set()

    # Check for cycles starting from each vertex
    for vertex in adj:
        if vertex not in visited:
            if dfs(vertex, None):
                return True

    return False

edges = [[0, 1], [1, 2], [3, 4], [4, 5], [3, 5]]
print(has_cycle(edges, 6))

edges = [[0, 1], [1, 2], [3, 4], [4, 5]]
print(has_cycle(edges, 6))
